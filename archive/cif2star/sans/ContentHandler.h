/*
 * $Id$
 *
 * This software is copyright (c) 2006 Board of Regents, University of Wisconsin.
 * All Rights Reserved.
 *
 */
#ifndef _CONTENT_HANDLER_H_
#define _CONTENT_HANDLER_H_

#include <string>
#include "STARLexer.h"

/**
 * \class ContentHandler
 * \brief Interface that user code must implement to use sans parsers.
 *
 * This is a pure abstract class (equivalent of Java interface) that
 * contains callback signatures for SansParser. User must create a
 * subclass and implement the callbacks to use sans parser.
 * <p>
 * This interface is for parsers that return tags and values in
 * one callback: its parameters are tag, value, their line numbers,
 * and a flag that's true for loop tags and false for free tags.
 * <p>
 * Callbacks that return a boolean return a "stop" flag: if callback
 * returns true, the parser will quit and return (however, it will not
 * close the input file or reset the seek pointer so parsing can be
 * resumed later). This can save time when extracting information from
 * the start of the STAR file: you can stop parsing and close the file
 * as soon as you read the data you're loking for.
 * \see SansParser2
 */
class ContentHandler {
  public:
    /**
     * \brief Start of data block.
     *
     * Called at the start of data block (when parser
     * encounters "data_<i>id</i>).
     *
     * \param line line number
     * \param id data block name without the leading "data_"
     * \return "stop" flag: if true, parser will stop and return.
     */
    virtual bool startData( int line, const std::string& id ) = 0;
    /**
     * \brief End of data block.
     *
     * Called at the end of data block (EOF, as it is implicit in STAR).
     *
     * \param line line number
     * \param id data block name without the leading "data_"
     */
    virtual void endData( int line, const std::string& id ) = 0;
    /**
     * \brief Start of a saveframe.
     *
     * Called at the start of a saveframe (when parser
     * encounters "save_<i>name</i>").
     *
     * \param line line number
     * \param name saveframe name withouth the leading "save_"
     * \return "stop" flag: if true, parser will stop and return.
     */
    virtual bool startSaveframe( int line, const std::string& name ) = 0;
    /**
     * \brief End of a saveframe.
     *
     * Called at the end of a saveframe (when parser encounters "save_").
     *
     * \param line line number
     * \param name saveframe name withouth the leading "save_"
     * \return "stop" flag: if true, parser will stop and return.
     */
    virtual bool endSaveframe( int line, const std::string& name ) = 0;
    /**
     * \brief Start of a loop.
     *
     * Called at the start of a loop (when parser encounters "loop_").
     *
     * \param line line number
     * \return "stop" flag: if true, parser will stop and return.
     */
    virtual bool startLoop( int line ) = 0;
    /**
     * \brief End of a loop.
     *
     * Called at the end of a loop. Depending on the exact type of STAR
     * format and parser used, end of loop may be an explicit input token
     * ("stop_"), or it may be generated by the parser.
     *
     * \param line line number
     * \return "stop" flag: if true, parser will stop and return.
     */
    virtual bool endLoop( int line ) = 0;
    /**
     * \brief Comment.
     *
     * Called when the parser encounters a comment (hash sign '#').
     * 
     * \param line line number
     * \param text comment text, from '#' to the end of the line
     *        First '#' is not included.
     * \return "stop" flag: if true, parser will stop and return.
     */
    virtual bool comment( int line, const std::string& text ) = 0;
    /**
     * \brief Tag-value pair.
     *
     * Called when the parser encounters a value.
     *
     * Called when the parser encounters a value. Values passed in 
     * <i>val</i> are modified as follows:
     *  - <b>FRAMECODE</b>: leading '$' is removed
     *  - <b>SINGLE</b> and <b>DOUBLE</b>: enclosing quotes (single
     *      or double) are removed
     *  - <b>SEMICOLON</b>: enclosing newline and semicolon pairs
     *      are removed
     * Bareword values are passed "as-is".
     * 
     * \param name tag name, including leading underscore
     * \param tagline tag line number
     * \param value value
     * \param valline value line number
     * \param delim delimiter type, one of STARLexer::Types
     * \param loop true for loop tag/values, false for free tag/values
     *
     * \return "stop" flag: if true, parser will stop and return.
     */
    virtual bool data( int tagline, const std::string& name, 
                       int valline, const std::string& val,
                       STARLexer::Types delim, bool loop ) = 0;
    /**
     * To keep gcc happy.
     */
    virtual ~ContentHandler() {}
};

#endif // CONTENT_HANDLER_H
